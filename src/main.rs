use std::collections::HashSet;

use anyhow::{anyhow, Context, Result};
use clap::{crate_authors, crate_description, crate_name, crate_version, Arg, Command};
use rayon::prelude::*;

fn args() -> Command {
    Command::new(crate_name!())
        .author(crate_authors!())
        .version(crate_version!())
        .about(crate_description!())
        .arg(
            Arg::new("file")
                .short('f')
                .long("file")
                .help("File to be inspected")
                .required(true),
        )
        .arg(
            Arg::new("char")
                .short('c')
                .long("chars")
                .help("Chars to be searched. Please separate them with spaces or don't separate at all. Some symbols should be shielded with backslashes, like this: \"\\ \"")
                .required(true)
                .num_args(1..),
        )
}

fn main() -> Result<()> {
    let start = std::time::Instant::now();
    let args = args().get_matches();

    let file_path = args
        .get_one::<String>("file")
        .ok_or(anyhow!("File is not porvided"))?;
    let chars = args
        .get_many::<String>("char")
        .ok_or(anyhow!("Argument error"))?
        .flat_map(|s| s.chars());

    let pattern: HashSet<char> = HashSet::from_iter(chars);

    let content = std::fs::read_to_string(file_path).context("Failed to read file content")?;

    let count = count(&content, pattern);
    let elapsed = start.elapsed();
    println!("Found {count} symbol occurences total in {elapsed:?}");

    Ok(())
}

fn count(content: &String, pattern: HashSet<char>) -> usize {
    content.par_matches(|c| pattern.contains(&c)).count()
}

#[cfg(test)]
mod test {
    use std::collections::HashSet;

    use crate::count;

    #[test]
    fn emoji() {
        let content = String::from("Lorem ipsum üçÜüçëüí¶üåΩüåΩüåΩü•ë");
        let mut pattern = HashSet::new();
        pattern.insert('üåΩ');

        assert_eq!(count(&content, pattern), 3);
    }

    #[test]
    fn empty() {
        let content = String::new();
        let mut pattern = HashSet::new();
        pattern.insert('o');

        assert_eq!(count(&content, pattern), 0);
    }

    #[test]
    fn not_alphanumeric() {
        let content = String::from("https://habr.com/ru/articles/733454/ –î–æ–ª–≥–æ–µ –≤—Ä–µ–º—è —è –∂–∏–ª –≤ —Ä–∞–π–æ–Ω–µ, –≥–¥–µ –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –±—ã–ª —Å–∫–æ—Ä–µ–µ –ø—Ä–æ–±–ª–µ–º–æ–π, —á–µ–º –±–ª–∞–≥–æ–º (–ø—Ä–∏–≤–µ—Ç, –ö—É–¥—Ä–æ–≤–æ!). –ü—Ä–∏—Ö–æ–¥–∏–ª–æ—Å—å –≤ –ª—é–±—É—é –ø–æ–≥–æ–¥—É —Ö–æ–¥–∏—Ç—å –ø–µ—à–∫–æ–º –¥–æ –º–µ—Ç—Ä–æ —Ç—Ä–∏ –∫–∏–ª–æ–º–µ—Ç—Ä–∞, –≤ –º–æ—Ä–æ–∑, —Å–ª—è–∫–æ—Ç—å –∏ –∑–Ω–æ–π. –°–ø—É—Å—Ç—è –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è —è –ø–µ—Ä–µ–µ—Ö–∞–ª –∏ –ø–æ—è–≤–∏–ª–∞—Å—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–µ–∑–∂–∞—Ç—å –æ—Ç –æ—Ñ–∏—Å–∞ –¥–æ –¥–æ–º–∞ –Ω–∞ –ø—Ä—è–º–æ–º –∞–≤—Ç–æ–±—É—Å–µ. –≠—Ç–æ –∑–≤—É—á–∏—Ç –æ—á–µ–Ω—å –∫–ª–µ–≤–æ, –Ω–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —Ö–æ–¥–∏—Ç —Å –±–æ–ª—å—à–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –∏ –∫–∞–∫ –ø–æ–ø–∞–ª–æ. –ü—Ä–∏—Ö–æ–¥–∏–ª–æ—Å—å –∏–ª–∏ –ø–æ–¥–æ–ª–≥—É —Å—Ç–æ—è—Ç—å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ, –∏–ª–∏ –Ω–µ—Ä–≤–Ω–æ –ø–æ–≥–ª—è–¥—ã–≤–∞—Ç—å –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –±–ª–∏–∂–∞–π—à–µ–≥–æ –∞–≤—Ç–æ–±—É—Å–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—á–∞—Å–∞ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º, —á—Ç–æ —Å–≤–æ–¥–∏–ª–æ –Ω–∞ –Ω–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –Ω–µ—Å–ª–∞–±–æ —Ä–∞–∑–¥—Ä–∞–∂–∞–ª–æ.");
        let mut pattern = HashSet::new();
        pattern.insert(' ');
        pattern.insert('.');
        pattern.insert(',');
        pattern.insert('!');
        pattern.insert('(');
        pattern.insert(')');
        pattern.insert(':');
        pattern.insert('/');

        assert_eq!(count(&content, pattern), 115);
    }
}
